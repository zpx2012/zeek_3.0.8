
%%{ // C segment
#include "util.h"
#include "threading/Manager.h"
#include "broker/Manager.h"

RecordType* ProcStats;
RecordType* NetStats;
RecordType* MatcherStats;
RecordType* ReassemblerStats;
RecordType* DNSStats;
RecordType* ConnStats;
RecordType* GapStats;
RecordType* EventStats;
RecordType* ThreadStats;
RecordType* TimerStats;
RecordType* FileAnalysisStats;
RecordType* BrokerStats;
RecordType* ReporterStats;
%%}

## Returns packet capture statistics. Statistics include the number of
## packets *(i)* received by Zeek, *(ii)* dropped, and *(iii)* seen on the
## link (not always available).
##
## Returns: A record of packet statistics.
##
## .. zeek:see:: get_conn_stats
##              get_dns_stats
##              get_event_stats
##              get_file_analysis_stats
##              get_gap_stats
##              get_matcher_stats
##              get_proc_stats
##              get_reassembler_stats
##              get_thread_stats
##              get_timer_stats
##              get_broker_stats
##              get_reporter_stats
function get_net_stats%(%): NetStats
	%{
	uint64 recv = 0;
	uint64 drop = 0;
	uint64 link = 0;
	uint64 bytes_recv = 0;

	const iosource::Manager::PktSrcList& pkt_srcs(iosource_mgr->GetPktSrcs());

	for ( iosource::Manager::PktSrcList::const_iterator i = pkt_srcs.begin();
	      i != pkt_srcs.end(); i++ )
		{
		iosource::PktSrc* ps = *i;

		struct iosource::PktSrc::Stats stat;
		ps->Statistics(&stat);
		recv += stat.received;
		drop += stat.dropped;
		link += stat.link;
		bytes_recv += stat.bytes_received;
		}

	RecordVal* r = new RecordVal(NetStats);
	int n = 0;

	r->Assign(n++, val_mgr->GetCount(recv));
	r->Assign(n++, val_mgr->GetCount(drop));
	r->Assign(n++, val_mgr->GetCount(link));
	r->Assign(n++, val_mgr->GetCount(bytes_recv));

	return r;
	%}

## Returns Zeek traffic statistics.
##
## Returns: A record with connection and packet statistics.
##
## .. zeek:see:: get_dns_stats
##              get_event_stats
##              get_file_analysis_stats
##              get_gap_stats
##              get_matcher_stats
##              get_net_stats
##              get_proc_stats
##              get_reassembler_stats
##              get_thread_stats
##              get_timer_stats
##              get_broker_stats
##              get_reporter_stats
function get_conn_stats%(%): ConnStats
	%{
	RecordVal* r = new RecordVal(ConnStats);
	int n = 0;

	r->Assign(n++, val_mgr->GetCount(Connection::TotalConnections()));
	r->Assign(n++, val_mgr->GetCount(Connection::CurrentConnections()));
	r->Assign(n++, val_mgr->GetCount(Connection::CurrentExternalConnections()));
	r->Assign(n++, val_mgr->GetCount(sessions->CurrentConnections()));

	SessionStats s;
	if ( sessions )
		sessions->GetStats(s);

#define ADD_STAT(x) \
	r->Assign(n++, val_mgr->GetCount(unsigned(sessions ? x : 0)));

	ADD_STAT(s.num_packets);
	ADD_STAT(s.num_fragments);
	ADD_STAT(s.max_fragments);
	ADD_STAT(s.num_TCP_conns);
	ADD_STAT(s.max_TCP_conns);
	ADD_STAT(s.cumulative_TCP_conns);
	ADD_STAT(s.num_UDP_conns);
	ADD_STAT(s.max_UDP_conns);
	ADD_STAT(s.cumulative_UDP_conns);
	ADD_STAT(s.num_ICMP_conns);
	ADD_STAT(s.max_ICMP_conns);
	ADD_STAT(s.cumulative_ICMP_conns);

	r->Assign(n++, val_mgr->GetCount(killed_by_inactivity));

	return r;
	%}

## Returns Zeek process statistics.
##
## Returns: A record with process statistics.
##
## .. zeek:see:: get_conn_stats
##              get_dns_stats
##              get_event_stats
##              get_file_analysis_stats
##              get_gap_stats
##              get_matcher_stats
##              get_net_stats
##              get_reassembler_stats
##              get_thread_stats
##              get_timer_stats
##              get_broker_stats
##              get_reporter_stats
function get_proc_stats%(%): ProcStats
	%{
	struct rusage ru;
	if ( getrusage(RUSAGE_SELF, &ru) < 0 )
		reporter->InternalError("getrusage() failed in get_proc_stats()");

	RecordVal* r = new RecordVal(ProcStats);
	int n = 0;

	double elapsed_time = current_time() - bro_start_time;
	double user_time =
		double(ru.ru_utime.tv_sec) + double(ru.ru_utime.tv_usec) / 1e6;
	double system_time =
		double(ru.ru_stime.tv_sec) + double(ru.ru_stime.tv_usec) / 1e6;

#ifdef DEBUG
	r->Assign(n++, val_mgr->GetCount(1));
#else
	r->Assign(n++, val_mgr->GetCount(0));
#endif

	r->Assign(n++, new Val(bro_start_time, TYPE_TIME));

	r->Assign(n++, new IntervalVal(elapsed_time, Seconds));
	r->Assign(n++, new IntervalVal(user_time, Seconds));
	r->Assign(n++, new IntervalVal(system_time, Seconds));

	uint64 total_mem;
	get_memory_usage(&total_mem, NULL);
	r->Assign(n++, val_mgr->GetCount(unsigned(total_mem)));

	r->Assign(n++, val_mgr->GetCount(unsigned(ru.ru_minflt)));
	r->Assign(n++, val_mgr->GetCount(unsigned(ru.ru_majflt)));
	r->Assign(n++, val_mgr->GetCount(unsigned(ru.ru_nswap)));
	r->Assign(n++, val_mgr->GetCount(unsigned(ru.ru_inblock)));
	r->Assign(n++, val_mgr->GetCount(unsigned(ru.ru_oublock)));
	r->Assign(n++, val_mgr->GetCount(unsigned(ru.ru_nivcsw)));

	return r;
	%}

## Returns statistics about the event engine.
##
## Returns: A record with event engine statistics.
##
## .. zeek:see:: get_conn_stats
##              get_dns_stats
##              get_file_analysis_stats
##              get_gap_stats
##              get_matcher_stats
##              get_net_stats
##              get_proc_stats
##              get_reassembler_stats
##              get_thread_stats
##              get_timer_stats
##              get_broker_stats
##              get_reporter_stats
function get_event_stats%(%): EventStats
	%{
	RecordVal* r = new RecordVal(EventStats);
	int n = 0;

	r->Assign(n++, val_mgr->GetCount(num_events_queued));
	r->Assign(n++, val_mgr->GetCount(num_events_dispatched));

	return r;
	%}

## Returns statistics about reassembler usage.
##
## Returns: A record with reassembler statistics.
##
## .. zeek:see:: get_conn_stats
##              get_dns_stats
##              get_event_stats
##              get_file_analysis_stats
##              get_gap_stats
##              get_matcher_stats
##              get_net_stats
##              get_proc_stats
##              get_thread_stats
##              get_timer_stats
##              get_broker_stats
##              get_reporter_stats
function get_reassembler_stats%(%): ReassemblerStats
	%{
	RecordVal* r = new RecordVal(ReassemblerStats);
	int n = 0;

	r->Assign(n++, val_mgr->GetCount(Reassembler::MemoryAllocation(REASSEM_FILE)));
	r->Assign(n++, val_mgr->GetCount(Reassembler::MemoryAllocation(REASSEM_FRAG)));
	r->Assign(n++, val_mgr->GetCount(Reassembler::MemoryAllocation(REASSEM_TCP)));
	r->Assign(n++, val_mgr->GetCount(Reassembler::MemoryAllocation(REASSEM_UNKNOWN)));

	return r;
	%}

## Returns statistics about DNS lookup activity.
##
## Returns: A record with DNS lookup statistics.
##
## .. zeek:see:: get_conn_stats
##              get_event_stats
##              get_file_analysis_stats
##              get_gap_stats
##              get_matcher_stats
##              get_net_stats
##              get_proc_stats
##              get_reassembler_stats
##              get_thread_stats
##              get_timer_stats
##              get_broker_stats
##              get_reporter_stats
function get_dns_stats%(%): DNSStats
	%{
	RecordVal* r = new RecordVal(DNSStats);
	int n = 0;

	DNS_Mgr::Stats dstats;
	dns_mgr->GetStats(&dstats);

	r->Assign(n++, val_mgr->GetCount(unsigned(dstats.requests)));
	r->Assign(n++, val_mgr->GetCount(unsigned(dstats.successful)));
	r->Assign(n++, val_mgr->GetCount(unsigned(dstats.failed)));
	r->Assign(n++, val_mgr->GetCount(unsigned(dstats.pending)));
	r->Assign(n++, val_mgr->GetCount(unsigned(dstats.cached_hosts)));
	r->Assign(n++, val_mgr->GetCount(unsigned(dstats.cached_addresses)));

	return r;
	%}

## Returns statistics about timer usage.
##
## Returns: A record with timer usage statistics.
##
## .. zeek:see:: get_conn_stats
##              get_dns_stats
##              get_event_stats
##              get_file_analysis_stats
##              get_gap_stats
##              get_matcher_stats
##              get_net_stats
##              get_proc_stats
##              get_reassembler_stats
##              get_thread_stats
##              get_broker_stats
##              get_reporter_stats
function get_timer_stats%(%): TimerStats
	%{
	RecordVal* r = new RecordVal(TimerStats);
	int n = 0;

	r->Assign(n++, val_mgr->GetCount(unsigned(timer_mgr->Size())));
	r->Assign(n++, val_mgr->GetCount(unsigned(timer_mgr->PeakSize())));
	r->Assign(n++, val_mgr->GetCount(timer_mgr->CumulativeNum()));

	return r;
	%}

## Returns statistics about file analysis.
##
## Returns: A record with file analysis statistics.
##
## .. zeek:see:: get_conn_stats
##              get_dns_stats
##              get_event_stats
##              get_gap_stats
##              get_matcher_stats
##              get_net_stats
##              get_proc_stats
##              get_reassembler_stats
##              get_thread_stats
##              get_timer_stats
##              get_broker_stats
##              get_reporter_stats
function get_file_analysis_stats%(%): FileAnalysisStats
	%{
	RecordVal* r = new RecordVal(FileAnalysisStats);
	int n = 0;

	r->Assign(n++, val_mgr->GetCount(file_mgr->CurrentFiles()));
	r->Assign(n++, val_mgr->GetCount(file_mgr->MaxFiles()));
	r->Assign(n++, val_mgr->GetCount(file_mgr->CumulativeFiles()));

	return r;
	%}

## Returns statistics about thread usage.
##
## Returns: A record with thread usage statistics.
##
## .. zeek:see:: get_conn_stats
##              get_dns_stats
##              get_event_stats
##              get_file_analysis_stats
##              get_gap_stats
##              get_matcher_stats
##              get_net_stats
##              get_proc_stats
##              get_reassembler_stats
##              get_timer_stats
##              get_broker_stats
##              get_reporter_stats
function get_thread_stats%(%): ThreadStats
	%{
	RecordVal* r = new RecordVal(ThreadStats);
	int n = 0;

	r->Assign(n++, val_mgr->GetCount(thread_mgr->NumThreads()));

	return r;
	%}

## Returns statistics about TCP gaps.
##
## Returns: A record with TCP gap statistics.
##
## .. zeek:see:: get_conn_stats
##              get_dns_stats
##              get_event_stats
##              get_file_analysis_stats
##              get_matcher_stats
##              get_net_stats
##              get_proc_stats
##              get_reassembler_stats
##              get_thread_stats
##              get_timer_stats
##              get_broker_stats
##              get_reporter_stats
function get_gap_stats%(%): GapStats
	%{
	RecordVal* r = new RecordVal(GapStats);
	int n = 0;

	r->Assign(n++, val_mgr->GetCount(tot_ack_events));
	r->Assign(n++, val_mgr->GetCount(tot_ack_bytes));
	r->Assign(n++, val_mgr->GetCount(tot_gap_events));
	r->Assign(n++, val_mgr->GetCount(tot_gap_bytes));

	return r;
	%}

## Returns statistics about the regular expression engine. Statistics include
## the number of distinct matchers, DFA states, DFA state transitions, memory
## usage of DFA states, cache hits/misses, and average number of NFA states
## across all matchers.
##
## Returns: A record with matcher statistics.
##
## .. zeek:see:: get_conn_stats
##              get_dns_stats
##              get_event_stats
##              get_file_analysis_stats
##              get_gap_stats
##              get_net_stats
##              get_proc_stats
##              get_reassembler_stats
##              get_thread_stats
##              get_timer_stats
##              get_broker_stats
##              get_reporter_stats
function get_matcher_stats%(%): MatcherStats
	%{
	RecordVal* r = new RecordVal(MatcherStats);
	int n = 0;

	RuleMatcher::Stats s;
	memset(&s, 0, sizeof(s));
	if ( rule_matcher )
		rule_matcher->GetStats(&s);

	r->Assign(n++, val_mgr->GetCount(s.matchers));
	r->Assign(n++, val_mgr->GetCount(s.nfa_states));
	r->Assign(n++, val_mgr->GetCount(s.dfa_states));
	r->Assign(n++, val_mgr->GetCount(s.computed));
	r->Assign(n++, val_mgr->GetCount(s.mem));
	r->Assign(n++, val_mgr->GetCount(s.hits));
	r->Assign(n++, val_mgr->GetCount(s.misses));

	return r;
	%}

## Returns statistics about Broker communication.
##
## Returns: A record with Broker statistics.
##
## .. zeek:see:: get_conn_stats
##              get_dns_stats
##              get_event_stats
##              get_file_analysis_stats
##              get_gap_stats
##              get_matcher_stats
##              get_net_stats
##              get_proc_stats
##              get_reassembler_stats
##              get_thread_stats
##              get_timer_stats
##              get_broker_stats
##              get_reporter_stats
function get_broker_stats%(%): BrokerStats
	%{
	RecordVal* r = new RecordVal(BrokerStats);
	int n = 0;
	
	auto cs = broker_mgr->GetStatistics();
	r->Assign(n++, val_mgr->GetCount(static_cast<uint64_t>(cs.num_peers)));
	r->Assign(n++, val_mgr->GetCount(static_cast<uint64_t>(cs.num_stores)));
	r->Assign(n++, val_mgr->GetCount(static_cast<uint64_t>(cs.num_pending_queries)));
	r->Assign(n++, val_mgr->GetCount(static_cast<uint64_t>(cs.num_events_incoming)));
	r->Assign(n++, val_mgr->GetCount(static_cast<uint64_t>(cs.num_events_outgoing)));
	r->Assign(n++, val_mgr->GetCount(static_cast<uint64_t>(cs.num_logs_incoming)));
	r->Assign(n++, val_mgr->GetCount(static_cast<uint64_t>(cs.num_logs_outgoing)));
	r->Assign(n++, val_mgr->GetCount(static_cast<uint64_t>(cs.num_ids_incoming)));
	r->Assign(n++, val_mgr->GetCount(static_cast<uint64_t>(cs.num_ids_outgoing)));

	return r;
	%}

## Returns statistics about reporter messages and weirds.
##
## Returns: A record with reporter statistics.
##
## .. zeek:see:: get_conn_stats
##              get_dns_stats
##              get_event_stats
##              get_file_analysis_stats
##              get_gap_stats
##              get_matcher_stats
##              get_net_stats
##              get_proc_stats
##              get_reassembler_stats
##              get_thread_stats
##              get_timer_stats
##              get_broker_stats
function get_reporter_stats%(%): ReporterStats
	%{
	RecordVal* r = new RecordVal(ReporterStats);
	int n = 0;

	TableVal* weirds_by_type = new TableVal(internal_type("table_string_of_count")->AsTableType());

	for ( auto& kv : reporter->GetWeirdsByType() )
		{
		Val* weird = new StringVal(kv.first);
		weirds_by_type->Assign(weird, val_mgr->GetCount(kv.second));
		Unref(weird);
		}

	r->Assign(n++, val_mgr->GetCount(reporter->GetWeirdCount()));
	r->Assign(n++, weirds_by_type);

	return r;
	%}
